
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import pickle
from datetime import datetime
import psycopg2
date_format = "%Y-%m-%d"
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
   
conn = psycopg2.connect("dbname=postgres user = postgres password=ayesh host=172.16.1.201")  
cur = conn.cursor()

cur.execute('Select * From company_profile2 WHERE company_id BETWEEN 0 AND 207')
for rec_one in cur.fetchall():
    company_id, company_name, cvss_score, security_confidence, estimated_exploit, cyber_risk, effort_rate, cyber_confidence = rec_one
    print(f"[{company_id}]: {company_name} {cvss_score} {security_confidence} {estimated_exploit} {cyber_risk} {effort_rate} {cyber_confidence} ")


f = open("FINAL.txt", "rt")
counter_cvss = 0
counter_exploit = 0
max_cvss = 0
total_cvss = []
total_exploit = 0
avg_exploit = 0
while (True):

    line = f.readline()
    if not line:
        break
    element = []
    each = line.split()
    element.append(each)
    if len(element[0])==1:
        com_id = element[0][0]
    else:
        cvss = float(element[0][0])
        published = element[0][1]
        if len(element[0])==3:
            exploited = element[0][2]
            a = datetime.strptime(published, date_format)
            b = datetime.strptime(exploited, date_format)
            delta = b-a
            published = int(delta.days)
            total_cvss.append(cvss)
            total_exploit = (total_exploit+published)  
            del exploited
            counter_cvss = counter_cvss+1
            counter_exploit = counter_exploit+1
        else:
            del published
            total_cvss.append(cvss)
            counter_cvss = counter_cvss+1
print('# exploits = ',counter_exploit)
print('# cvss = ',counter_cvss)
max_cvss = max(total_cvss)
print("max CVSS: ", max_cvss)
avg_exploit = total_exploit/counter_exploit
rounded = round(avg_exploit)
print("avg exploit: ", rounded)
f.close()
cur.execute("UPDATE company_profile2 SET cvss_score = %s, estimated_exploit = %s WHERE company_id = %s ", [max_cvss, rounded, com_id])


print('hey')
Y_test = pd.read_sql_query('SELECT company_name, cvss_score, security_confidence, estimated_exploit, cyber_risk FROM company_profile2 WHERE company_id>=0', conn)
loaded_model = pickle.load(open('finalized_model.sav', 'rb'))
Y_test_name = Y_test['company_name']
Y_test_cyber_risk = Y_test['cyber_risk']
Y_test = Y_test.drop(['cyber_risk', "company_name"], axis = 1)
Y_test["cyber_risk"] = loaded_model.predict(Y_test)
Y_test = pd.concat([Y_test_name, Y_test], axis =1)
pred = list(Y_test['cyber_risk'])
length = len(pred)
print(length)
for x in range(length):
    cur.execute("UPDATE company_profile2 SET cyber_risk = %s ", [pred[x]])
    cur.execute('Select * From company_profile2 WHERE company_id BETWEEN 0 AND 207')
for rec_one in cur.fetchall():
    company_id, company_name, cvss_score, security_confidence, estimated_exploit, cyber_risk, effort_rate, cyber_confidence = rec_one
    print(f"[{company_id}]: {company_name} {cvss_score} {security_confidence} {estimated_exploit} {cyber_risk} {effort_rate} {cyber_confidence} ")

cyber_risk
cyberrisk = 0

if cyber_risk=='Mild':
    cyberrisk = 0
elif cyber_risk=='Manageable':
    cyberrisk = 3.3
elif cyber_risk=='High':
    cyberrisk = 6.6
elif cyber_risk=='Very High':
    cyberrisk = 9.9
print(cyberrisk)
cyber_confidence = (10-cyberrisk)*0.65+(effort_rate+10)*0.35
round(cyber_confidence)
if 0 <= cyber_confidence <= 2.5:
    confidence_label = "Very Bad"
elif 2.5 < cyber_confidence <= 5:
    confidence_label = "Bad"
elif 5 < cyber_confidence <= 7.5:
    confidence_label = "Good"
elif 7.5 < cyber_confidence <= 10:
    confidence_label = "Very Good"
print(confidence_label)
cur.execute("UPDATE company_profile2 SET cyber_confidence = %s ", [confidence_label])
print(str(cyber_confidence) + ':' + str(cyberrisk))
conn.commit()

    